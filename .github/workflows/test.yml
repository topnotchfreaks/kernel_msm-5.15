name: "Test Build"

env:
  OUT_DIR: "out"
  KERNEL_VERSION: "5.15"
  ANDROID_VERSION: "13"
  SUSFS_BRANCH: "gki-android13-5.15"

on:
  workflow_dispatch:
    inputs:
      kernelSourceURL:
        description: "Kernel source URL"
        required: true
        type: string
        default: "https://github.com/topnotchfreaks/kernel_msm-5.15"
      kernelBranch:
        description: "Kernel branch"
        required: false
        type: string
        default: "codelinaro"
      kernelDevice:
        description: "Device (used for defconfig)"
        required: true
        type: string
        default: "gki"
      localVersion:
        description: "Custom localversion name (e.g., -mybuild)"
        required: false
        type: string
        default: ""
      buildKSU:
        description: "Build KSU variant?"
        required: false
        type: boolean
        default: true
      ltoMode:
        description: "Choose LTO mode"
        required: true
        default: "thin"
        type: choice
        options:
          - "thin"
          - "full"

jobs:
  Build-Kernel:
    name: "üöÄ Build 5.15 Kernel"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        variant: ${{ fromJSON(inputs.buildKSU == true && '["noksu", "ksu"]' || '["noksu"]') }}
    env:
      kernelDir: common_${{ github.event.inputs.kernelDevice }}
      kernelName: common
      DEFCONFIG_NAME: ${{ github.event.inputs.kernelDevice }}_defconfig
      WORK_DIR: ${{ github.workspace }}

    steps:
      - name: "‚ú® Setup workspace"
        run: |
          mkdir -p $kernelDir
          echo "BUILD_TIME=$(date +'%Y-%m-%d')" >> $GITHUB_ENV
          sudo apt-get update -qq
          sudo apt-get install -y repo rsync aria2

      - name: "üåü Clone kernel source"
        working-directory: ./${{ env.kernelDir }}
        run: |
          git clone --recursive --branch ${{ github.event.inputs.kernelBranch }} \
            ${{ github.event.inputs.kernelSourceURL }} ${{ env.kernelName }} --depth=1

      - name: "üì• Initialize repo"
        working-directory: ${{ env.WORK_DIR}}
        run: |
          repo init -u https://android.googlesource.com/kernel/manifest -b common-android13-5.15-lts --depth=1
          repo sync --optimized-fetch --prune -j8
          
          rm -rf .repo
          rm -rf common

          aria2c -x 16 -s 16 -o prebuilts/clang/host/linux-x86/clang-r547379.tar.gz "https://github.com/topnotchfreaks/clang/releases/download/v1.0.0/clang-r547379.tar.gz"
          mkdir -p prebuilts/clang/host/linux-x86/clang-r547379
          tar -xzf prebuilts/clang/host/linux-x86/clang-r547379.tar.gz -C prebuilts/clang/host/linux-x86/clang-r547379
          rm -rf prebuilts/clang/host/linux-x86/clang-r547379.tar.gz

          rm -rf prebuilts/clang/host/linux-x86/clang-3289846
          rm -rf prebuilts/clang/host/linux-x86/clang-r450784e
          rm -rf prebuilts/clang/host/linux-x86/clang-stable
          
          sed -i \
           -e 's/^BRANCH=.*/BRANCH=android13-5.15/' \
           -e 's/^CLANG_VERSION=.*/CLANG_VERSION=r547379/' \
           ${{ env.kernelDir }}/${{ env.kernelName }}/build.config.constants
          
          sed -i '/^POST_DEFCONFIG_CMDS="check_defconfig"/d' ${{ env.kernelDir }}/${{ env.kernelName }}/build.config.gki

      - name: "üìê Setup build environment"
        run: |
          # Setup swap based on LTO mode
          if [ "${{ github.event.inputs.ltoMode }}" = "Full" ]; then
            SWAP_SIZE=20G
          else
            SWAP_SIZE=8G
          fi
          sudo fallocate -l $SWAP_SIZE /swapfile
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile
          echo "vm.swappiness=60" | sudo tee -a /etc/sysctl.conf
          sudo sysctl -p

      - name: "‚öôÔ∏è Configure kernel"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        run: |
          # Define the config file path
          CONFIG_FILE="arch/arm64/configs/${{ env.DEFCONFIG_NAME }}"
          
          # Set localversion
          if [ -n "${{ github.event.inputs.localVersion }}" ]; then
            echo "CONFIG_LOCALVERSION=\"${{ github.event.inputs.localVersion }}\"" >> "$CONFIG_FILE"
          fi
          
          # Basic optimizations
          echo "CONFIG_KALLSYMS=y" >> "$CONFIG_FILE"

      - name: "üõ† Apply kernel patches"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        run: |
          curl -L -o lineage.patch "https://raw.githubusercontent.com/topnotchfreaks/kernel_patches/main/0001-fs-lineageos-disguise.patch"
          patch -p1 < lineage.patch || echo "Warning: Some hunks failed"

      - name: "üîß Setup KernelSU (KSU variant only)"
        if: matrix.variant == 'ksu'
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        run: |
          rm -rf ./KernelSU ./drivers/kernelsu
          
          # Install KernelSU with SUSFS
          curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU-Ultra/main/kernel/setup.sh" | bash -s susfs-main
          
          # Apply SUSFS patch
          PATCH_URL="https://api.github.com/repos/topnotchfreaks/kernel_patches/releases/latest"
          SUSFS_PATCH=$(curl -s "$PATCH_URL" | grep "browser_download_url.*0001-Implement-SUSFS.*Android-13.*Kernel-5.15.*patch" | cut -d '"' -f 4 | head -n 1)
          
          if [ -n "$SUSFS_PATCH" ]; then
            curl -L -o susfs.patch "$SUSFS_PATCH"
            patch -p1 < susfs.patch || echo "Warning: SUSFS patch failed"
          fi
          
          # Apply syscall hooks
          curl -L -o hooks.patch "https://raw.githubusercontent.com/topnotchfreaks/kernel_patches/main/0001-SUSFS-syscall-hooks.patch"
          patch -p1 < hooks.patch || echo "Warning: Syscall hooks failed"
          
          # Add KSU configs
          CONFIG_FILE="arch/arm64/configs/${{ env.DEFCONFIG_NAME }}"
          cat >> "$CONFIG_FILE" << 'EOF'
          CONFIG_KSU=y
          CONFIG_KSU_MANUAL_HOOK=y
          CONFIG_KPM=y
          CONFIG_KSU_SUSFS=y
          CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y
          CONFIG_KSU_SUSFS_SUS_PATH=y
          CONFIG_KSU_SUSFS_SUS_MOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y
          CONFIG_KSU_SUSFS_SUS_KSTAT=y
          CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n
          CONFIG_KSU_SUSFS_TRY_UMOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y
          CONFIG_KSU_SUSFS_SPOOF_UNAME=y
          CONFIG_KSU_SUSFS_ENABLE_LOG=y
          CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y
          CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y
          CONFIG_KSU_SUSFS_OPEN_REDIRECT=y
          CONFIG_KSU_SUSFS_SUS_SU=n
          CONFIG_TMPFS_XATTR=y
          CONFIG_TMPFS_POSIX_ACL=y
          EOF

      - name: "üî® Build kernel"
        working-directory: ${{ env.WORK_DIR }}
        env:
          KBUILD_BUILD_USER: "belowzeroiq"
          KBUILD_BUILD_HOST: "GitHub"
        run: |
          export SOURCE_DATE_EPOCH=$(date +%s)

          LTO=${{ github.event.inputs.ltoMode }} \
          BUILD_CONFIG=${{ env.kernelDir }}/${{ env.kernelName }}/build.config.gki.aarch64 \
          build/build.sh -j$(nproc --all)

      - name: "ü©π Apply KPM patch (KSU variant only)"
        if: matrix.variant == 'ksu'
        working-directory: ${{ env.WORK_DIR }}/out/dist
        run: |
          curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU_patch/refs/heads/main/kpm/patch_linux" -o patch
          chmod +x patch
          ./patch
          mv oImage Image

      - name: "üì¶ Prepare artifact"
        working-directory: ${{ env.WORK_DIR }}
        run: |
          cp out/dist/Image Image.${{ matrix.variant }}

      - name: "üì§ Upload kernel"
        uses: actions/upload-artifact@v4
        with:
          name: kernel-${{ matrix.variant }}
          path: ${{ env.WORK_DIR }}/Image.${{ matrix.variant }}
          retention-days: 3

  Package-Kernels:
    name: "üì¶ Package kernels"
    runs-on: ubuntu-latest
    needs: Build-Kernel
    steps:
      - name: "üì• Download artifacts"
        uses: actions/download-artifact@v4
        with:
          path: ./kernels/

      - name: "üì¶ Create flashable ZIP"
        run: |
          BUILD_TIME=$(date +'%Y-%m-%d')
          git clone --depth=1 https://github.com/topnotchfreaks/AnyKernel3 -b master AnyKernel3
          
          # Copy kernels
          find kernels -name "Image.*" -exec cp {} AnyKernel3/ \;
          
          # Create ZIP
          ZIP_NAME="Anykernel3_${{ github.event.inputs.kernelBranch }}_${BUILD_TIME}.zip"
          cd AnyKernel3
          zip -r9 "../$ZIP_NAME" * -x .git/*
          cd ..
          echo "ZIP_PATH=$(pwd)/$ZIP_NAME" >> $GITHUB_ENV
          echo "ZIP_NAME=$ZIP_NAME" >> $GITHUB_ENV

      - name: "üì§ Upload final package"
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ZIP_NAME }}
          path: ${{ env.ZIP_PATH }}
          retention-days: 7

      - name: "üì± Send to Telegram"
        if: always()
        run: |
          if [[ -f "${{ env.ZIP_PATH }}" ]]; then
            curl -s -F document=@"${{ env.ZIP_PATH }}" \
                 -F caption="‚úÖ 5.15 Kernel Build Complete - $(date '+%Y-%m-%d %H:%M:%S')" \
                 -F chat_id=${{ secrets.TELEGRAM_USER_ID }} \
                 "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendDocument"
          else
            curl -s -X POST \
                 -d chat_id=${{ secrets.TELEGRAM_USER_ID }} \
                 -d text="‚ùå 5.15 Kernel build failed" \
                 "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage"
          fi