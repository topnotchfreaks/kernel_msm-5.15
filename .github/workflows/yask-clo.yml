name: "Build YASK CLO"

env:
  OUT_DIR: "out"

on:
  schedule:
    - cron: '0 0 * * 0'
  workflow_dispatch:

jobs:
  Set-repos:
    name: "🐂 Parse repository"
    runs-on: ubuntu-latest
    outputs:
      repos: ${{ steps.generate-matrix.outputs.repos }}
    steps:
      - name: "😄 Checkout"
        uses: actions/checkout@v4

  Build-Kernel:
    name: "🐎 Build kernel"
    runs-on: ubuntu-latest
    env:
      kernelDir: common_gki
      kernelName: common
      kernelRepo: https://git.codelinaro.org/clo/la/kernel/msm-5.15
      kernelBranch: kernel.lnx.5.15.r1-rel
      kernelDevice: gki
      DEFCONFIG_NAME: gki_defconfig
      OUT_DIR: "out"
      localVersion: "-YASK/CLO"

    steps:
      - name: "✨ Setup workspace"
        run: |
          mkdir -p $kernelDir
          echo "BUILD_TIME=$(date +'%Y-%m-%d')" >> $GITHUB_ENV
          sudo apt-get update
          sudo apt-get install -y build-essential bc curl flex cpio rsync git zip dwarves libelf-dev gcc-aarch64-linux-gnu libssl-dev python3 clang lld llvm llvm-dev

      - name: "🚀 Setup ccache (optimized for kernel)"
        run: |
          sudo apt-get install -y ccache
          
          mkdir -p $HOME/.ccache
          
          ccache --version
          ccache --max-size=4G
          ccache --set-config=compression=true
          ccache --set-config=compression_level=1
          
          ccache --set-config=sloppiness="time_macros,include_file_mtime,include_file_ctime,file_macro,pch_defines"
          ccache --set-config=hash_dir=true
          ccache --set-config=base_dir="${{ github.workspace }}"
          
          echo "CCACHE_DIR=$HOME/.ccache" >> $GITHUB_ENV
          echo "CCACHE_MAXSIZE=4G" >> $GITHUB_ENV
          echo "CCACHE_COMPRESS=true" >> $GITHUB_ENV
          echo "CCACHE_COMPRESSLEVEL=1" >> $GITHUB_ENV
          echo "CCACHE_SLOPPINESS=time_macros,include_file_mtime,include_file_ctime,file_macro,pch_defines" >> $GITHUB_ENV
          echo "CCACHE_HASHDIR=true" >> $GITHUB_ENV
          echo "CCACHE_BASEDIR=${{ github.workspace }}" >> $GITHUB_ENV
          echo "CCACHE_NOHASHDIR=false" >> $GITHUB_ENV
          echo "CCACHE_HARDLINK=true" >> $GITHUB_ENV
          echo "CCACHE_COMPILERCHECK=%compiler% -dumpmachine; %compiler% -dumpversion" >> $GITHUB_ENV
          
          ccache --zero-stats
          ccache --show-stats

      - name: "📦 Cache ccache directory"
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ccache-${{ env.kernelBranch }}-${{ env.DEFCONFIG_NAME }}-${{ hashFiles('**/Kconfig*', '**/*.mk') }}-${{ github.sha }}
          restore-keys: |
            ccache-${{ env.kernelBranch }}-${{ env.DEFCONFIG_NAME }}-${{ hashFiles('**/Kconfig*', '**/*.mk') }}-
            ccache-${{ env.kernelBranch }}-${{ env.DEFCONFIG_NAME }}-
            ccache-${{ env.kernelBranch }}-
            ccache-

      - name: "🌟 Clone kernel source => (${{ env.kernelRepo }})"
        working-directory: ./${{ env.kernelDir }}
        run: |
          set -x
          git clone --recursive --branch ${{ env.kernelBranch }} \
            ${{ env.kernelRepo }} ${{ env.kernelName }} --depth=1

      - name: "💫 Get Toolchains"
        run: |
          set -e
          
          get_latest_github_release() {
            local repo_url="$1"
            latest_url=$(curl -sL "https://api.github.com/repos/$repo_url/releases/latest" | grep "browser_download_url.*tar.gz" | cut -d '"' -f 4 | head -n 1)

            if [[ -z "$latest_url" ]]; then
              echo "❌ Failed to fetch latest release from $repo_url!"
              exit 1
            fi

            printf "%s" "$latest_url"
          }

          clang_url=$(get_latest_github_release "greenforce-project/greenforce_clang")
          echo "✅ Clang URL: $clang_url"
          mkdir -p clang

          if [[ "$clang_url" == *.tar.gz ]]; then
            echo "🚀 Downloading latest Clang..."
            wget --progress=bar:force -O "clang/clang.tar.gz" "$clang_url" || { echo "❌ Failed to download Clang!"; exit 1; }
            echo "📦 Extracting Clang..."
            tar -xf clang/clang.tar.gz -C clang || { echo "❌ Extraction failed!"; exit 1; }
            rm -f clang/clang.tar.gz
          else
            echo "🚀 Cloning Clang..."
            git clone --recursive --depth=1 "$clang_url" clang || { echo "❌ Cloning failed!"; exit 1; }
          fi

          if [ -d "clang/bin" ]; then
            CLANG_PATH="${{ github.workspace }}/clang/bin"
          else
            CLANG_PATH=$(find clang -type d -name "bin" | head -n 1)
            CLANG_PATH="${{ github.workspace }}/${CLANG_PATH}"
          fi

          if [ ! -f "$CLANG_PATH/clang" ]; then
            echo "❌ Clang binary not found in $CLANG_PATH!"
            ls -R clang
            exit 1
          fi

          echo "✅ Using Clang from $CLANG_PATH"
          echo "CLANG_PATH=$CLANG_PATH" >> $GITHUB_ENV
          echo "$CLANG_PATH" >> $GITHUB_PATH

      - name: 📐 Setup swap 20G
        uses: pierotofy/set-swap-space@master
        with:
            swap-size-gb: 20

      - name: 📐 Tune Swap
        run: |
            echo "vm.swappiness=80" | sudo tee -a /etc/sysctl.conf
            sudo sysctl -p
          
      - name: "🔧 Setup kernel-specific ccache optimizations"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        run: |
          cat > .ccache-ignore << 'EOF'
          include/generated/autoconf.h
          include/generated/compile.h
          include/generated/utsrelease.h
          scripts/mod/devicetable-offsets.h
          EOF
          
          IGNORE_HEADERS=$(cat .ccache-ignore | tr '\n' ':' | sed 's/:$//')
          echo "CCACHE_IGNOREHEADERS=${{ github.workspace }}/${{ env.kernelDir }}/${{ env.kernelName }}/$IGNORE_HEADERS" >> $GITHUB_ENV
          
          echo "✅ Kernel-specific ccache optimizations applied"
      
      - name: "😎 Set args for GKI kernels"
        id: generate-args
        working-directory: ./${{ env.kernelDir }}
        env:
            params: "${{ toJSON(matrix.repos.params) }}"
        run: |
            args="-j$(nproc --all)"
            if [ -n "${{ env.OUT_DIR }}" ]; then
              mkdir -p $(pwd)/${{ env.OUT_DIR }}
              args="$args O=$(pwd)/${{ env.OUT_DIR }}"
            fi
            args="$args ARCH=arm64 LLVM=1 LTO=thin"
            args="$args CROSS_COMPILE=aarch64-linux-gnu-"
            args="$args CLANG_TRIPLE=aarch64-linux-gnu-"
            args="$args AR=llvm-ar"
            args="$args CC=clang"
            echo "args=$args" >> $GITHUB_OUTPUT

      - name: "🛠 Set localversion name in defconfig"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        env:
          LOCALVERSION: ${{ env.localVersion }}
        run: |
          if [ -n "$LOCALVERSION" ]; then
            echo "CONFIG_LOCALVERSION=\"$LOCALVERSION\"" >> arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
          fi

      - name: "🧩 Apply Kernel Fixup Patch"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        run: |
          set -ex
          log() {
            echo "$(date '+%Y-%m-%d %H:%M:%S') - $1"
          }
          apply_patch() {
            local patch="$1"
            log "Applying patch: $(basename "$patch")"
            if ! patch -p1 < "$patch"; then
              log "Warning: Some hunks failed in $(basename "$patch")"
            fi
          }
          PATCH_URL="https://raw.githubusercontent.com/topnotchfreaks/kernel_patches/main/0001-gki-fixup.patch"
          PATCH_FILE="0001-gki-fixup.patch"
          curl -L -o "$PATCH_FILE" "$PATCH_URL"
          [ -f "$PATCH_FILE" ] || { log "Patch download failed"; exit 1; }
          apply_patch "$PATCH_FILE"
          log "✅ External patch applied"

      - name: "🛠 Setup kernel Tweaks"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        run: |
          set -e
          log() {
            echo "$(date '+%Y-%m-%d %H:%M:%S') - $1"
          }
          apply_patch() {
            local patch="$1"
            log "Applying patch: $(basename "$patch")"
            if ! patch -p1 < "$patch"; then
              log "Warning: Some hunks failed in $(basename "$patch")"
            fi
          }
          PATCH_URLS=(
            "https://raw.githubusercontent.com/topnotchfreaks/kernel_patches/main/0001-fs-lineageos-disguise.patch"
          )
          for PATCH_URL in "${PATCH_URLS[@]}"; do
            PATCH_FILE=$(basename "$PATCH_URL")
            curl -L -o "$PATCH_FILE" "$PATCH_URL"
            [ -f "$PATCH_FILE" ] || { log "Patch download failed"; exit 1; }
            apply_patch "$PATCH_FILE"
          done
          log "✅ All patches applied"

      - name: "😋 Update KernelSU Version"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        run: |
          [ -d "./KernelSU" ] && rm -rf "./KernelSU"
          [ -d "./drivers/kernelsu" ] && rm -rf "./drivers/kernelsu"
          curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU-Ultra/main/kernel/setup.sh" | bash -s susfs-main
          echo "✅ KernelSU updated"

      - name: "😋 Setup SUSFS"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        run: |
          set -ex
          log() { echo "$(date '+%Y-%m-%d %H:%M:%S') - $1"; }
          PATCH_URL="https://raw.githubusercontent.com/topnotchfreaks/kernel_patches/main/0001-Implement-SUSFS-v1.5.7-syscall-hooks.patch"
          PATCH_FILE="0001-Implement-SUSFS-v1.5.7-syscall-hooks.patch"
          curl -L -o "$PATCH_FILE" "$PATCH_URL"
          [ -f "$PATCH_FILE" ] || { log "Patch download failed"; exit 1; }
          patch -p1 < "$PATCH_FILE" || log "Warning: Some hunks failed"
          log "✅ SUSFS patch applied"

      - name: "⚙️ Add SUSFS configs"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        run: |
          set -ex
          CONFIG_FILE="./arch/arm64/configs/${DEFCONFIG_NAME}"
          CONFIGS=(
            "CONFIG_KSU=y"
            "CONFIG_KSU_MANUAL_HOOK=y"
            "CONFIG_KPM=y"
            "CONFIG_KALLSYMS=y"
            "CONFIG_KSU_SUSFS=y"
            "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y"
            "CONFIG_KSU_SUSFS_SUS_PATH=y"
            "CONFIG_KSU_SUSFS_SUS_MOUNT=y"
            "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y"
            "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y"
            "CONFIG_KSU_SUSFS_SUS_KSTAT=y"
            "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n"
            "CONFIG_KSU_SUSFS_TRY_UMOUNT=y"
            "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y"
            "CONFIG_KSU_SUSFS_SPOOF_UNAME=y"
            "CONFIG_KSU_SUSFS_ENABLE_LOG=y"
            "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y"
            "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y"
            "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y"
            "CONFIG_KSU_SUSFS_SUS_SU=n"
            "CONFIG_TMPFS_XATTR=y"
            "CONFIG_TMPFS_POSIX_ACL=y"
          )
          printf "%s\n" "${CONFIGS[@]}" >> "$CONFIG_FILE"
          echo "✅ SUSFS configs added"

      - name: "📝 Append custom Makefile line"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        run: |
          echo 'KBUILD_CFLAGS += -Wno-default-const-init-unsafe' >> Makefile
          echo "Custom Makefile line added"

      - name: "👍 Make defconfig"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        env:
          args: ${{ steps.generate-args.outputs.args }}
        run: |
          make ${{ env.args }} ${{ env.DEFCONFIG_NAME }}

      - name: "📊 Show ccache stats (before build)"
        run: |
          echo "=== CCACHE STATS BEFORE BUILD ==="
          ccache --show-stats

      - name: "🎶 Build kernel"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        env:
          args: ${{ steps.generate-args.outputs.args }}
        run: |
          export KBUILD_BUILD_USER="Automated"
          export KBUILD_BUILD_HOST="GH-Actions"
          
          make ${{ env.args }} \
            LLVM=1 \
            LTO=thin \
            CC="ccache clang" \
            HOSTCC="ccache clang" \
            AR=llvm-ar \
            NM=llvm-nm \
            OBJCOPY="llvm-objcopy" \
            STRIP="llvm-strip" \
            -j$(nproc --all)

      - name: "📊 Show ccache stats (after build)"
        if: always()
        run: |
          echo "=== CCACHE STATS AFTER BUILD ==="
          ccache --show-stats
          
          # Calculate and display hit rate
          HITS=$(ccache --show-stats | grep "cache hit" | grep -o '[0-9]*' | head -1 || echo "0")
          MISSES=$(ccache --show-stats | grep "cache miss" | grep -o '[0-9]*' | head -1 || echo "0")
          TOTAL=$((HITS + MISSES))
          if [ $TOTAL -gt 0 ]; then
            HIT_RATE=$((HITS * 100 / TOTAL))
            echo "=== CCACHE HIT RATE: ${HIT_RATE}% ==="
            if [ $HIT_RATE -lt 50 ]; then
              echo "⚠️  Low hit rate detected. Consider checking ccache configuration."
            else
              echo "✅ Good ccache performance!"
            fi
          fi
          
          echo "=== CACHE SIZE ==="
          du -sh $HOME/.ccache || echo "Cache directory not found"

      - name: "🩹 Patch Image with KPM"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        run: |
          cd "../${{ env.OUT_DIR }}/arch/arm64/boot/"
          curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU_patch/refs/heads/main/kpm/patch_linux" -o patch
          chmod 777 patch
          ./patch
          rm -rf Image
          mv oImage Image

      - name: "📦 Pack Anykernel3"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        run: |
          set -e
          [ ! -d "AnyKernel3" ] && git clone https://github.com/topnotchfreaks/AnyKernel3.git --depth=1
          KERNEL_IMAGE_PATH="../${{ env.OUT_DIR }}/arch/arm64/boot/Image"
          [ -f "$KERNEL_IMAGE_PATH" ] || KERNEL_IMAGE_PATH=$(find ../${{ env.OUT_DIR }}/arch/arm64/boot -name "Image*" | head -n 1)
          [ -z "$KERNEL_IMAGE_PATH" ] && { echo "Error: No kernel image found"; exit 1; }
          cp "$KERNEL_IMAGE_PATH" AnyKernel3/Image
          KERNEL_VERSION=$(make kernelversion)
          BUILD_DATE=$(date +'%Y-%m-%d')
          ZIP_NAME="Anykernel3_YASK-CLO-${KERNEL_VERSION}-${BUILD_DATE}.zip"
          cd AnyKernel3
          zip -r9 "../$ZIP_NAME" * -x .git/*
          cd ..
          echo "ZIP_NAME=$ZIP_NAME" >> $GITHUB_ENV

      - name: "⬆️ Upload Kernel Artifact"
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ZIP_NAME }}
          path: ./${{ env.kernelDir }}/${{ env.kernelName }}/${{ env.ZIP_NAME }}
          retention-days: 7

      - name: "⬆️ Upload ZIP to GitHub Release"
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          files: ./${{ env.kernelDir }}/${{ env.kernelName }}/${{ env.ZIP_NAME }}
          tag_name: "YASK"

      - name: "📤 Send kernel ZIP to Telegram"
        env:
          KSU_CHOICE: ${{ github.event.inputs.kernelSUChoice }}
        run: |
          UPLOAD_ZIP_NAME="Anykernel3_${{ env.kernelBranch }}_${{ env.BUILD_TIME }}.zip"

          mv "./${{ env.kernelDir }}/${{ env.kernelName }}/${{ env.kernelBranch }}_${{ env.BUILD_TIME }}.zip" \
             "./${{ env.kernelDir }}/${{ env.kernelName }}/${UPLOAD_ZIP_NAME}"

          ANYKERNEL3_PATH="./${{ env.kernelDir }}/${{ env.kernelName }}/${UPLOAD_ZIP_NAME}"

          KSU_MSG=""
          if [[ "${KSU_CHOICE}" == "SukiSU-Ultra-SuSFS-stable" ]]; then
            KSU_MSG="KernelSU: SukiSU-Stable"
          elif [[ "${KSU_CHOICE}" == "SukiSU-Ultra-SuSFS-dev" ]]; then
            KSU_MSG="KernelSU: SukiSU-dev"
          elif [[ "${KSU_CHOICE}" == "None" ]]; then
            KSU_MSG="KernelSU: None"
          else
            KSU_MSG="KernelSU: ${KSU_CHOICE}"
          fi

          if [[ -f "$ANYKERNEL3_PATH" ]]; then
            curl -s -F document=@"$ANYKERNEL3_PATH" \
                 -F caption="
                 ✅ Build Date $(date '+%Y-%m-%d %H:%M:%S')
                 ${KSU_MSG}" \
                 -F chat_id=${{ secrets.TELEGRAM_CHANNEL_ID }} \
                 "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_YAOB }}/sendDocument"
          else
            curl -s -X POST \
                 -d chat_id=${{ secrets.TELEGRAM_CHANNEL_ID }} \
                 -d text="
                 ❌ Kernel build failed or no output file found.
                 ${KSU_MSG}" \
                 "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_YAOB }}/sendMessage"
          fi
