name: "Build YASK"

env:
  OUT_DIR: "out"
  KERNEL_VERSION: "5.15"
  ANDROID_VERSION: "13"

on:
  schedule:
    - cron: '0 0 * * 0'
  workflow_dispatch:

jobs:
  build-kernels:
    name: "🐎 Build YASK ${{ matrix.kernel.name }} kernel"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        kernel:
          - name: "GKI"
            dir: "common_gki"
            repo_name: "common"
            repo_url: "https://android.googlesource.com/kernel/common"
            branch: "android13-5.15-lts"
            defconfig: "gki_defconfig"
            local_version: "-YASK-GKI"
            output_name: "Image.gki"
            kpm_patch_url: "https://raw.githubusercontent.com/ShirkNeko/SukiSU_patch/refs/heads/main/kpm/patch_linux"
            extra_patches:
              - "https://raw.githubusercontent.com/topnotchfreaks/kernel_patches/main/0001-Revert-bpf-fix-precision-backtracking-instruction-it.patch"
          - name: "CLO"
            dir: "common_clo"
            repo_name: "clo"
            repo_url: "https://git.codelinaro.org/clo/la/kernel/msm-5.15.git"
            branch: "kernel.lnx.5.15.r16-rel"
            defconfig: "gki_defconfig"
            local_version: "-YASK-CLO"
            output_name: "Image.clo"
            kpm_patch_url: "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU_patch/refs/heads/main/kpm/patch_linux"
            extra_patches: []

    env:
      KERNEL_LOC_DIR: ${{ matrix.kernel.dir }}
      KERNEL_NAME: ${{ matrix.kernel.repo_name }}
      KERNEL_REPO: ${{ matrix.kernel.repo_url }}
      KERNEL_BRANCH: ${{ matrix.kernel.branch }}
      DEFCONFIG_NAME: ${{ matrix.kernel.defconfig }}
      LOCAL_VERSION: ${{ matrix.kernel.local_version }}
      OUTPUT_NAME: ${{ matrix.kernel.output_name }}
      WORK_DIR: ${{ github.workspace }}
      KBUILD_BUILD_USER: "Automated"
      KBUILD_BUILD_HOST: "GitHub"

    steps:
      - name: "✨ Setup workspace"
        run: |
          mkdir -p ${{ env.KERNEL_LOC_DIR }}
          echo "BUILD_TIME=$(date +'%Y-%m-%d')" >> $GITHUB_ENV
          sudo apt-get update -qq
          sudo apt-get install -y repo rsync aria2

          sudo fallocate -l 8G /swapfile
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile
          echo "vm.swappiness=60" | sudo tee -a /etc/sysctl.conf
          sudo sysctl -p

      - name: "🌟 Clone kernel source"
        working-directory: ./${{ env.KERNEL_LOC_DIR }}
        run: |
          git clone --recursive --branch ${{ env.KERNEL_BRANCH }} \
            ${{ env.KERNEL_REPO }} ${{ env.KERNEL_NAME }} --depth=1

      - name: "📥 Initialize AOSP repo and toolchains"
        working-directory: ${{ env.WORK_DIR }}
        run: |
          # Initialize AOSP repo
          repo init -u https://android.googlesource.com/kernel/manifest -b common-android13-5.15-lts --depth=1
          repo sync --optimized-fetch --prune -j8
          
          # Clean up existing repo and common directories
          rm -rf .repo
          rm -rf common

          # Download and setup custom clang toolchain
          aria2c -x 16 -s 16 -o prebuilts/clang/host/linux-x86/clang-r547379.tar.gz "https://github.com/topnotchfreaks/clang/releases/download/v1.0.0/clang-r547379.tar.gz"
          mkdir -p prebuilts/clang/host/linux-x86/clang-r547379
          tar -xzf prebuilts/clang/host/linux-x86/clang-r547379.tar.gz -C prebuilts/clang/host/linux-x86/clang-r547379
          rm -rf prebuilts/clang/host/linux-x86/clang-r547379.tar.gz

          # Remove unused clang for more space
          rm -rf prebuilts/clang/host/linux-x86/clang-3289846
          rm -rf prebuilts/clang/host/linux-x86/clang-r450784e
          rm -rf prebuilts/clang/host/linux-x86/clang-stable
          
          # Update build config constants
          sed -i \
           -e 's/^BRANCH=.*/BRANCH=android13-5.15/' \
           -e 's/^CLANG_VERSION=.*/CLANG_VERSION=r547379/' \
           ${{ env.KERNEL_LOC_DIR }}/${{ env.KERNEL_NAME }}/build.config.constants
          
          # Remove defconfig check (if exists)
          sed -i '/^POST_DEFCONFIG_CMDS="check_defconfig"/d' ${{ env.KERNEL_LOC_DIR }}/${{ env.KERNEL_NAME }}/build.config.gki || true

      - name: "🧩 Configure kernel & patches"
        working-directory: ${{ env.KERNEL_LOC_DIR }}/${{ env.KERNEL_NAME }}
        run: |
          CONFIG_FILE="arch/arm64/configs/${{ env.DEFCONFIG_NAME }}"
          echo "CONFIG_LOCALVERSION=\"${{ env.LOCAL_VERSION }}\"" >> "$CONFIG_FILE"
          echo "CONFIG_LOCALVERSION_AUTO=n" >> "$CONFIG_FILE"

          # Helper
          apply_patch() {
            local url="$1"
            local file=$(basename "$url")
            curl -L -o "$file" "$url"
            patch -p1 < "$file" || echo "::warning::Hunks failed in $file"
            rm -f "$file"
          }

          # Common patches
          apply_patch "https://raw.githubusercontent.com/topnotchfreaks/kernel_patches/main/0001-gki-fixup.patch"
          apply_patch "https://raw.githubusercontent.com/topnotchfreaks/kernel_patches/main/0001-fs-lineageos-disguise.patch"

          # Kernel-specific patches
          echo '${{ toJSON(matrix.kernel.extra_patches) }}' | jq -r '.[]' | while read p; do
            [ -n "$p" ] && apply_patch "$p"
          done

      - name: "😋 Setup KernelSU & SUSFS & Configs"
        working-directory: ${{ env.KERNEL_LOC_DIR }}/${{ env.KERNEL_NAME }}
        run: |
          # KernelSU
          rm -rf KernelSU drivers/kernelsu
          curl -LSs https://raw.githubusercontent.com/ShirkNeko/SukiSU-Ultra/main/kernel/setup.sh | bash -s susfs-main

          # SUSFS patches
          PATCHES=$(curl -s https://api.github.com/repos/topnotchfreaks/kernel_patches/releases/latest | \
                    grep -o 'browser_download_url.*\.patch' | cut -d\" -f3)
          SELECTED=$(echo "$PATCHES" | \
                     grep "0001-Implement-SUSFS" | \
                     grep "Android-${{ env.ANDROID_VERSION }}" | \
                     grep "Kernel-${{ env.KERNEL_VERSION }}" | head -n 1)
          [ -z "$SELECTED" ] && SELECTED=$(echo "$PATCHES" | grep "0001-Implement-SUSFS" | head -n 1)
          [ -z "$SELECTED" ] && { echo "No SUSFS patch"; exit 1; }

          curl -L -o susfs.patch "$SELECTED"
          patch -p1 < susfs.patch || echo "::warning::SUSFS hunks failed"
          rm -f susfs.patch

          # Syscall hooks
          curl -L -o syscall.patch \
            https://raw.githubusercontent.com/topnotchfreaks/kernel_patches/main/0001-SUSFS-syscall-hooks.patch
          patch -p1 < syscall.patch || echo "::warning::Syscall hooks hunks failed"
          rm -f syscall.patch
          
          CONFIG_FILE="./arch/arm64/configs/${{ env.DEFCONFIG_NAME }}"
          
          # Basic optimizations
          echo "CONFIG_KALLSYMS=y" >> "$CONFIG_FILE"
          
          # SUSFS configs
          cat >> "$CONFIG_FILE" << 'EOF'
          CONFIG_KSU=y
          CONFIG_KSU_MANUAL_HOOK=y
          CONFIG_KPM=y
          CONFIG_KSU_SUSFS=y
          CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y
          CONFIG_KSU_SUSFS_SUS_PATH=y
          CONFIG_KSU_SUSFS_SUS_MOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y
          CONFIG_KSU_SUSFS_SUS_KSTAT=y
          CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n
          CONFIG_KSU_SUSFS_TRY_UMOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y
          CONFIG_KSU_SUSFS_SPOOF_UNAME=y
          CONFIG_KSU_SUSFS_ENABLE_LOG=y
          CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y
          CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y
          CONFIG_KSU_SUSFS_OPEN_REDIRECT=y
          CONFIG_KSU_SUSFS_SUS_SU=n
          CONFIG_TMPFS_XATTR=y
          CONFIG_TMPFS_POSIX_ACL=y
          EOF

          # Performance configs
          cat >> "$CONFIG_FILE" << 'EOF'
          CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=y
          CONFIG_ZRAM_DEF_COMP_LZ4=y
          CONFIG_ZRAM_DEF_COMP="lz4"
          CONFIG_TCP_CONG_ADVANCED=y
          CONFIG_TCP_CONG_BIC=n
          CONFIG_TCP_CONG_WESTWOOD=y
          CONFIG_TCP_CONG_HTCP=n
          CONFIG_TCP_CONG_BBR=y
          CONFIG_DEFAULT_WESTWOOD=y
          EOF
          
          echo "✅ All configs added"

      - name: "🔨 Build kernel"
        working-directory: ${{ env.WORK_DIR }}
        run: |
          LINUX_COMPILE_BY="belowzeroiq" \
          LINUX_COMPILE_HOST="GitHub" \
          LTO=full \
          BUILD_CONFIG=${{ env.KERNEL_LOC_DIR }}/${{ env.KERNEL_NAME }}/build.config.gki.aarch64 \
          build/build.sh -j$(nproc --all)

      - name: "🩹 Apply KPM patch"
        working-directory: ${{ env.WORK_DIR }}/out/dist
        run: |
          curl -LSs "${{ matrix.kernel.kpm_patch_url }}" -o patch
          chmod +x patch
          ./patch
          mv oImage "${{ env.OUTPUT_NAME }}"

      - name: "📤 Upload kernel artifact"
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.kernel.name }}-kernel
          path: ${{ env.WORK_DIR }}/out/dist/${{ env.OUTPUT_NAME }}
          retention-days: 1

  package-kernels:
    name: "📦 Package Kernels"
    runs-on: ubuntu-latest
    needs: [build-kernels]
    steps:
      - name: "📥 Download kernel artifacts"
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts/

      - name: "📦 Create release package"
        run: |
          set -e

          # Clone AnyKernel3
          git clone --depth=1 https://github.com/topnotchfreaks/AnyKernel3 -b YASK AnyKernel3

          # Copy kernel images
          find ./artifacts -name "Image.*" -exec cp {} AnyKernel3/ \;

          # Create banner
          cat > AnyKernel3/banner << 'EOF'
          ╔═════════════════════════════════════════════════════╗
          ║                                                     ║
          ║          ██╗   ██╗ █████╗ ███████╗██╗  ██╗          ║
          ║          ╚██╗ ██╔╝██╔══██╗██╔════╝██║ ██╔╝          ║
          ║           ╚████╔╝ ███████║███████╗█████╔╝           ║
          ║            ╚██╔╝  ██╔══██║╚════██║██╔═██╗           ║
          ║             ██║   ██║  ██║███████║██║  ██╗          ║
          ║             ╚═╝   ╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝          ║
          ║                                                     ║
          ║                    by belowzeroiq                   ║
          ║                                                     ║
          ╠═════════════════════════════════════════════════════╣
          ║                                                     ║
          ║     Please ensure:                                  ║
          ║     • Your device is compatible                     ║
          ║     • You have a backup of your current kernel      ║
          ║                                                     ║
          ╚═════════════════════════════════════════════════════╝
          Installing YASK Kernel...
          EOF

          # Create ZIP
          ZIP_NAME="Anykernel3_YASK-AIO_$(date +'%Y-%m-%d').zip"
          cd AnyKernel3
          zip -r9 "../$ZIP_NAME" * -x .git/*
          cd ..
          
          echo "ZIP_NAME=$ZIP_NAME" >> $GITHUB_ENV
          echo "✅ Package created: $ZIP_NAME"

      - name: "⬆️ Upload to GitHub Release"
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          files: ${{ env.ZIP_NAME }}
          tag_name: "YASK"