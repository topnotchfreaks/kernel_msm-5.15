name: "Build YASK"

env:
  OUT_DIR: "out"

on:
  schedule:
    - cron: '0 0 * * 0'
  workflow_dispatch:

jobs:
  Set-repos:
    name: "üêÇ Parse repository"
    runs-on: ubuntu-latest
    outputs:
      repos: ${{ steps.generate-matrix.outputs.repos }}
    steps:
      - name: "üòÑ Checkout"
        uses: actions/checkout@v4

  Build-GKI:
    name: "üêé Build YASK GKI kernel"
    runs-on: ubuntu-latest
    env:
      kernelDir: common_gki
      kernelName: common
      kernelRepo: https://android.googlesource.com/kernel/common
      kernelBranch: android13-5.15-lts
      kernelDevice: gki
      DEFCONFIG_NAME: gki_defconfig
      OUT_DIR: "out"
      localVersion: "-YASK/GKI"

    steps:
      - name: "‚ú® Setup workspace"
        run: |
          mkdir -p $kernelDir
          echo "BUILD_TIME=$(date +'%Y-%m-%d')" >> $GITHUB_ENV
          sudo apt-get update
          sudo apt-get install -y build-essential bc curl flex cpio rsync git zip dwarves libelf-dev gcc-aarch64-linux-gnu libssl-dev python3 clang lld llvm llvm-dev

      - name: "üåü Clone kernel source => (${{ env.kernelRepo }})"
        working-directory: ./${{ env.kernelDir }}
        run: |
          set -x
          git clone --recursive --branch ${{ env.kernelBranch }} \
            ${{ env.kernelRepo }} ${{ env.kernelName }} --depth=1

      - name: "üí´ Get Toolchains"
        run: |
          set -e
          
          get_latest_github_release() {
            local repo_url="$1"
            latest_url=$(curl -sL "https://api.github.com/repos/$repo_url/releases/latest" | grep "browser_download_url.*tar.gz" | cut -d '"' -f 4 | head -n 1)

            if [[ -z "$latest_url" ]]; then
              echo "‚ùå Failed to fetch latest release from $repo_url!"
              exit 1
            fi

            printf "%s" "$latest_url"
          }

          clang_url=$(get_latest_github_release "greenforce-project/greenforce_clang")
          echo "‚úÖ Clang URL: $clang_url"
          mkdir -p clang

          if [[ "$clang_url" == *.tar.gz ]]; then
            echo "üöÄ Downloading latest Clang..."
            wget --progress=bar:force -O "clang/clang.tar.gz" "$clang_url" || { echo "‚ùå Failed to download Clang!"; exit 1; }
            echo "üì¶ Extracting Clang..."
            tar -xf clang/clang.tar.gz -C clang || { echo "‚ùå Extraction failed!"; exit 1; }
            rm -f clang/clang.tar.gz
          else
            echo "üöÄ Cloning Clang..."
            git clone --recursive --depth=1 "$clang_url" clang || { echo "‚ùå Cloning failed!"; exit 1; }
          fi

          if [ -d "clang/bin" ]; then
            CLANG_PATH="${{ github.workspace }}/clang/bin"
          else
            CLANG_PATH=$(find clang -type d -name "bin" | head -n 1)
            CLANG_PATH="${{ github.workspace }}/${CLANG_PATH}"
          fi

          if [ ! -f "$CLANG_PATH/clang" ]; then
            echo "‚ùå Clang binary not found in $CLANG_PATH!"
            ls -R clang
            exit 1
          fi

          echo "‚úÖ Using Clang from $CLANG_PATH"
          echo "CLANG_PATH=$CLANG_PATH" >> $GITHUB_ENV
          echo "$CLANG_PATH" >> $GITHUB_PATH

      - name: üìê Setup swap 20G
        uses: pierotofy/set-swap-space@master
        with:
            swap-size-gb: 20

      - name: üìê Tune Swap
        run: |
            echo "vm.swappiness=80" | sudo tee -a /etc/sysctl.conf
            sudo sysctl -p
          
      - name: "üõ† Set localversion name in defconfig"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        env:
          LOCALVERSION: ${{ env.localVersion }}
        run: |
          if [ -n "$LOCALVERSION" ]; then
            echo "CONFIG_LOCALVERSION=\"$LOCALVERSION\"" >> arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
          fi      

      - name: "üß© Apply Kernel Fixup Patch"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        run: |
          set -ex
          log() {
            echo "$(date '+%Y-%m-%d %H:%M:%S') - $1"
          }
          apply_patch() {
            local patch="$1"
            log "Applying patch: $(basename "$patch")"
            if ! patch -p1 < "$patch"; then
              log "Warning: Some hunks failed in $(basename "$patch")"
            fi
          }
          PATCH_URL="https://raw.githubusercontent.com/topnotchfreaks/kernel_patches/main/0001-gki-fixup.patch"
          PATCH_FILE="0001-gki-fixup.patch"
          curl -L -o "$PATCH_FILE" "$PATCH_URL"
          [ -f "$PATCH_FILE" ] || { log "Patch download failed"; exit 1; }
          apply_patch "$PATCH_FILE"
          log "‚úÖ External patch applied"

      - name: "üõ† Setup kernel Tweaks"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        run: |
          set -e
          log() {
            echo "$(date '+%Y-%m-%d %H:%M:%S') - $1"
          }
          apply_patch() {
            local patch="$1"
            log "Applying patch: $(basename "$patch")"
            if ! patch -p1 < "$patch"; then
              log "Warning: Some hunks failed in $(basename "$patch")"
            fi
          }
          PATCH_URLS=(
            "https://raw.githubusercontent.com/topnotchfreaks/kernel_patches/main/0001-fs-lineageos-disguise.patch"
          )
          for PATCH_URL in "${PATCH_URLS[@]}"; do
            PATCH_FILE=$(basename "$PATCH_URL")
            curl -L -o "$PATCH_FILE" "$PATCH_URL"
            [ -f "$PATCH_FILE" ] || { log "Patch download failed"; exit 1; }
            apply_patch "$PATCH_FILE"
          done
          log "‚úÖ All patches applied"

      - name: "üòã Update KernelSU Version"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        run: |
          [ -d "./KernelSU" ] && rm -rf "./KernelSU"
          [ -d "./drivers/kernelsu" ] && rm -rf "./drivers/kernelsu"
          curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU-Ultra/main/kernel/setup.sh" | bash -s susfs-main
          echo "‚úÖ KernelSU updated"

      - name: "üòã Setup SUSFS"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        run: |
          set -ex
          log() { echo "$(date '+%Y-%m-%d %H:%M:%S') - $1"; }
          PATCH_URL="https://raw.githubusercontent.com/topnotchfreaks/kernel_patches/main/0001-Implement-SUSFS-v1.5.8-syscall-hooks.patch"
          PATCH_FILE="0001-Implement-SUSFS-v1.5.8-syscall-hooks.patch"
          curl -L -o "$PATCH_FILE" "$PATCH_URL"
          [ -f "$PATCH_FILE" ] || { log "Patch download failed"; exit 1; }
          patch -p1 < "$PATCH_FILE" || log "Warning: Some hunks failed"
          log "‚úÖ SUSFS patch applied"

      - name: "‚öôÔ∏è Add SUSFS configs"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        run: |
          set -ex
          CONFIG_FILE="./arch/arm64/configs/${DEFCONFIG_NAME}"
          CONFIGS=(
            "CONFIG_KSU=y"
            "CONFIG_KSU_MANUAL_HOOK=y"
            "CONFIG_KPM=y"
            "CONFIG_KALLSYMS=y"
            "CONFIG_KSU_SUSFS=y"
            "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y"
            "CONFIG_KSU_SUSFS_SUS_PATH=y"
            "CONFIG_KSU_SUSFS_SUS_MOUNT=y"
            "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y"
            "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y"
            "CONFIG_KSU_SUSFS_SUS_KSTAT=y"
            "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n"
            "CONFIG_KSU_SUSFS_TRY_UMOUNT=y"
            "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y"
            "CONFIG_KSU_SUSFS_SPOOF_UNAME=y"
            "CONFIG_KSU_SUSFS_ENABLE_LOG=y"
            "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y"
            "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y"
            "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y"
            "CONFIG_KSU_SUSFS_SUS_SU=n"
            "CONFIG_TMPFS_XATTR=y"
            "CONFIG_TMPFS_POSIX_ACL=y"
          )
          printf "%s\n" "${CONFIGS[@]}" >> "$CONFIG_FILE"
          echo "‚úÖ SUSFS configs added"

      - name: "‚öôÔ∏è Add Additional configs"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        run: |
          set -ex
          CONFIG_FILE="./arch/arm64/configs/${DEFCONFIG_NAME}"

          sed -i '/CONFIG_NO_HZ/d' "$CONFIG_FILE"

          CONFIGS=(
            "CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=y"
            "CONFIG_ZRAM_DEF_COMP_LZ4=y"
            "CONFIG_TCP_CONG_ADVANCED=y"
            "CONFIG_TCP_CONG_BIC=n"
            "CONFIG_TCP_CONG_WESTWOOD=y"
            "CONFIG_TCP_CONG_HTCP=n"
            "CONFIG_TCP_CONG_BBR=y"
            "CONFIG_DEFAULT_WESTWOOD=y"
          )
          printf "%s\n" "${CONFIGS[@]}" >> "$CONFIG_FILE"
          echo "‚úÖ configs added"

      - name: "üìù Append custom Makefile line"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        run: |
          echo 'KBUILD_CFLAGS += -Wno-default-const-init-unsafe' >> Makefile
          echo "Custom Makefile line added"

      - name: "üòé Set args for GKI kernels"
        id: generate-args
        working-directory: ./${{ env.kernelDir }}
        env:
            params: "${{ toJSON(matrix.repos.params) }}"
        run: |
            args="-j$(nproc --all)"
            if [ -n "${{ env.OUT_DIR }}" ]; then
              mkdir -p $(pwd)/${{ env.OUT_DIR }}
              args="$args O=$(pwd)/${{ env.OUT_DIR }}"
            fi
            args="$args ARCH=arm64 LLVM=1 LTO=thin"
            args="$args CROSS_COMPILE=aarch64-linux-gnu-"
            args="$args CLANG_TRIPLE=aarch64-linux-gnu-"
            args="$args AR=llvm-ar"
            args="$args CC=clang"
            echo "args=$args" >> $GITHUB_OUTPUT

      - name: "üëç Make defconfig"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        env:
          args: ${{ steps.generate-args.outputs.args }}
        run: |
          make ${{ env.args }} ${{ env.DEFCONFIG_NAME }}

      - name: "üé∂ Build kernel"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        env:
          args: ${{ steps.generate-args.outputs.args }}
        run: |
          export KBUILD_BUILD_USER="Automated"
          export KBUILD_BUILD_HOST="GitHub"

          make ${{ env.args }} \
            LLVM=1 \
            LTO=thin \
            CC=clang \
            AR=llvm-ar \
            NM=llvm-nm \
            OBJCOPY="llvm-objcopy" \
            STRIP="llvm-strip" \
            -j$(nproc --all)

      - name: "ü©π Patch Image with KPM"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        run: |
          cd "../${{ env.OUT_DIR }}/arch/arm64/boot/"
          curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU_patch/refs/heads/main/kpm/patch_linux" -o patch
          chmod 777 patch
          ./patch
          rm -rf Image
          mv oImage Image.gki

      - name: "üì§ Upload GKI kernel artifact"
        uses: actions/upload-artifact@v4
        with:
          name: gki-kernel
          path: ${{ env.kernelDir }}/${{ env.OUT_DIR }}/arch/arm64/boot/Image.gki
          retention-days: 1

  Build-CLO:
    name: "üêé Build YASK CLO kernel"
    runs-on: ubuntu-latest
    env:
      kernelDir: common_clo
      kernelName: clo
      kernelRepo: https://git.codelinaro.org/clo/la/kernel/msm-5.15
      kernelBranch: kernel.lnx.5.15.r1-rel
      kernelDevice: gki
      DEFCONFIG_NAME: gki_defconfig
      OUT_DIR: "out"
      localVersion: "-YASK/CLO"

    steps:
      - name: "‚ú® Setup workspace"
        run: |
          mkdir -p $kernelDir
          echo "BUILD_TIME=$(date +'%Y-%m-%d')" >> $GITHUB_ENV
          sudo apt-get update
          sudo apt-get install -y build-essential bc curl flex cpio rsync git zip dwarves libelf-dev gcc-aarch64-linux-gnu libssl-dev python3 clang lld llvm llvm-dev

      - name: "üåü Clone kernel source => (${{ env.kernelRepo }})"
        working-directory: ./${{ env.kernelDir }}
        run: |
          set -x
          git clone --recursive --branch ${{ env.kernelBranch }} \
            ${{ env.kernelRepo }} ${{ env.kernelName }} --depth=1

      - name: "üí´ Get Toolchains"
        run: |
          set -e
          
          get_latest_github_release() {
            local repo_url="$1"
            latest_url=$(curl -sL "https://api.github.com/repos/$repo_url/releases/latest" | grep "browser_download_url.*tar.gz" | cut -d '"' -f 4 | head -n 1)

            if [[ -z "$latest_url" ]]; then
              echo "‚ùå Failed to fetch latest release from $repo_url!"
              exit 1
            fi

            printf "%s" "$latest_url"
          }

          clang_url=$(get_latest_github_release "greenforce-project/greenforce_clang")
          echo "‚úÖ Clang URL: $clang_url"
          mkdir -p clang

          if [[ "$clang_url" == *.tar.gz ]]; then
            echo "üöÄ Downloading latest Clang..."
            wget --progress=bar:force -O "clang/clang.tar.gz" "$clang_url" || { echo "‚ùå Failed to download Clang!"; exit 1; }
            echo "üì¶ Extracting Clang..."
            tar -xf clang/clang.tar.gz -C clang || { echo "‚ùå Extraction failed!"; exit 1; }
            rm -f clang/clang.tar.gz
          else
            echo "üöÄ Cloning Clang..."
            git clone --recursive --depth=1 "$clang_url" clang || { echo "‚ùå Cloning failed!"; exit 1; }
          fi

          if [ -d "clang/bin" ]; then
            CLANG_PATH="${{ github.workspace }}/clang/bin"
          else
            CLANG_PATH=$(find clang -type d -name "bin" | head -n 1)
            CLANG_PATH="${{ github.workspace }}/${CLANG_PATH}"
          fi

          if [ ! -f "$CLANG_PATH/clang" ]; then
            echo "‚ùå Clang binary not found in $CLANG_PATH!"
            ls -R clang
            exit 1
          fi

          echo "‚úÖ Using Clang from $CLANG_PATH"
          echo "CLANG_PATH=$CLANG_PATH" >> $GITHUB_ENV
          echo "$CLANG_PATH" >> $GITHUB_PATH

      - name: üìê Setup swap 20G
        uses: pierotofy/set-swap-space@master
        with:
            swap-size-gb: 20

      - name: üìê Tune Swap
        run: |
            echo "vm.swappiness=80" | sudo tee -a /etc/sysctl.conf
            sudo sysctl -p
          
      - name: "üõ† Set localversion name in defconfig"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        env:
          LOCALVERSION: ${{ env.localVersion }}
        run: |
          if [ -n "$LOCALVERSION" ]; then
            echo "CONFIG_LOCALVERSION=\"$LOCALVERSION\"" >> arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
          fi     

      - name: "üß© Apply Kernel Fixup Patch"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        run: |
          set -ex
          log() {
            echo "$(date '+%Y-%m-%d %H:%M:%S') - $1"
          }
          apply_patch() {
            local patch="$1"
            log "Applying patch: $(basename "$patch")"
            if ! patch -p1 < "$patch"; then
              log "Warning: Some hunks failed in $(basename "$patch")"
            fi
          }
          PATCH_URL="https://raw.githubusercontent.com/topnotchfreaks/kernel_patches/main/0001-gki-fixup.patch"
          PATCH_FILE="0001-gki-fixup.patch"
          curl -L -o "$PATCH_FILE" "$PATCH_URL"
          [ -f "$PATCH_FILE" ] || { log "Patch download failed"; exit 1; }
          apply_patch "$PATCH_FILE"
          log "‚úÖ External patch applied"

      - name: "üõ† Setup kernel Tweaks"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        run: |
          set -e
          log() {
            echo "$(date '+%Y-%m-%d %H:%M:%S') - $1"
          }
          apply_patch() {
            local patch="$1"
            log "Applying patch: $(basename "$patch")"
            if ! patch -p1 < "$patch"; then
              log "Warning: Some hunks failed in $(basename "$patch")"
            fi
          }
          PATCH_URLS=(
            "https://raw.githubusercontent.com/topnotchfreaks/kernel_patches/main/0001-fs-lineageos-disguise.patch"
          )
          for PATCH_URL in "${PATCH_URLS[@]}"; do
            PATCH_FILE=$(basename "$PATCH_URL")
            curl -L -o "$PATCH_FILE" "$PATCH_URL"
            [ -f "$PATCH_FILE" ] || { log "Patch download failed"; exit 1; }
            apply_patch "$PATCH_FILE"
          done
          log "‚úÖ All patches applied"

      - name: "üòã Update KernelSU Version"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        run: |
          [ -d "./KernelSU" ] && rm -rf "./KernelSU"
          [ -d "./drivers/kernelsu" ] && rm -rf "./drivers/kernelsu"
          curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU-Ultra/main/kernel/setup.sh" | bash -s susfs-main
          echo "‚úÖ KernelSU updated"

      - name: "üòã Setup SUSFS"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        run: |
          set -ex
          log() { echo "$(date '+%Y-%m-%d %H:%M:%S') - $1"; }
          PATCH_URL="https://raw.githubusercontent.com/topnotchfreaks/kernel_patches/main/0001-Implement-SUSFS-v1.5.8-syscall-hooks.patch"
          PATCH_FILE="0001-Implement-SUSFS-v1.5.8-syscall-hooks.patch"
          curl -L -o "$PATCH_FILE" "$PATCH_URL"
          [ -f "$PATCH_FILE" ] || { log "Patch download failed"; exit 1; }
          patch -p1 < "$PATCH_FILE" || log "Warning: Some hunks failed"
          log "‚úÖ SUSFS patch applied"

      - name: "‚öôÔ∏è Add SUSFS configs"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        run: |
          set -ex
          CONFIG_FILE="./arch/arm64/configs/${DEFCONFIG_NAME}"
          CONFIGS=(
            "CONFIG_KSU=y"
            "CONFIG_KSU_MANUAL_HOOK=y"
            "CONFIG_KPM=y"
            "CONFIG_KALLSYMS=y"
            "CONFIG_KSU_SUSFS=y"
            "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y"
            "CONFIG_KSU_SUSFS_SUS_PATH=y"
            "CONFIG_KSU_SUSFS_SUS_MOUNT=y"
            "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y"
            "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y"
            "CONFIG_KSU_SUSFS_SUS_KSTAT=y"
            "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n"
            "CONFIG_KSU_SUSFS_TRY_UMOUNT=y"
            "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y"
            "CONFIG_KSU_SUSFS_SPOOF_UNAME=y"
            "CONFIG_KSU_SUSFS_ENABLE_LOG=y"
            "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y"
            "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y"
            "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y"
            "CONFIG_KSU_SUSFS_SUS_SU=n"
            "CONFIG_TMPFS_XATTR=y"
            "CONFIG_TMPFS_POSIX_ACL=y"
          )
          printf "%s\n" "${CONFIGS[@]}" >> "$CONFIG_FILE"
          echo "‚úÖ SUSFS configs added"

      - name: "‚öôÔ∏è Add Additional configs"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        run: |
          set -ex
          CONFIG_FILE="./arch/arm64/configs/${DEFCONFIG_NAME}"

          sed -i '/CONFIG_NO_HZ/d' "$CONFIG_FILE"

          CONFIGS=(
            "CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=y"
            "CONFIG_ZRAM_DEF_COMP_LZ4=y"
            "CONFIG_TCP_CONG_ADVANCED=y"
            "CONFIG_TCP_CONG_BIC=n"
            "CONFIG_TCP_CONG_WESTWOOD=y"
            "CONFIG_TCP_CONG_HTCP=n"
            "CONFIG_TCP_CONG_BBR=y"
            "CONFIG_DEFAULT_WESTWOOD=y"
          )
          printf "%s\n" "${CONFIGS[@]}" >> "$CONFIG_FILE"
          echo "‚úÖ configs added"

      - name: "üìù Append custom Makefile line"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        run: |
          echo 'KBUILD_CFLAGS += -Wno-default-const-init-unsafe' >> Makefile
          echo "Custom Makefile line added"

      - name: "üòé Set args for CLO kernels"
        id: generate-args
        working-directory: ./${{ env.kernelDir }}
        env:
            params: "${{ toJSON(matrix.repos.params) }}"
        run: |
            args="-j$(nproc --all)"
            if [ -n "${{ env.OUT_DIR }}" ]; then
              mkdir -p $(pwd)/${{ env.OUT_DIR }}
              args="$args O=$(pwd)/${{ env.OUT_DIR }}"
            fi
            args="$args ARCH=arm64 LLVM=1 LTO=thin"
            args="$args CROSS_COMPILE=aarch64-linux-gnu-"
            args="$args CLANG_TRIPLE=aarch64-linux-gnu-"
            args="$args AR=llvm-ar"
            args="$args CC=clang"
            echo "args=$args" >> $GITHUB_OUTPUT

      - name: "üëç Make defconfig"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        env:
          args: ${{ steps.generate-args.outputs.args }}
        run: |
          make ${{ env.args }} ${{ env.DEFCONFIG_NAME }}

      - name: "üé∂ Build kernel"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        env:
          args: ${{ steps.generate-args.outputs.args }}
        run: |
          export KBUILD_BUILD_USER="Automated"
          export KBUILD_BUILD_HOST="GitHub"

          make ${{ env.args }} \
            LLVM=1 \
            LTO=thin \
            CC=clang \
            AR=llvm-ar \
            NM=llvm-nm \
            OBJCOPY="llvm-objcopy" \
            STRIP="llvm-strip" \
            -j$(nproc --all)

      - name: "ü©π Patch Image with KPM"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        run: |
          cd "../${{ env.OUT_DIR }}/arch/arm64/boot/"
          curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU_patch/refs/heads/main/kpm/patch_linux" -o patch
          chmod 777 patch
          ./patch
          rm -rf Image
          mv oImage Image.clo

      - name: "üì§ Upload CLO kernel artifact"
        uses: actions/upload-artifact@v4
        with:
          name: clo-kernel
          path: ${{ env.kernelDir }}/${{ env.OUT_DIR }}/arch/arm64/boot/Image.clo
          retention-days: 1

  Package-Kernels:
    name: "üì¶ Package Kernels"
    runs-on: ubuntu-latest
    needs: [Build-GKI, Build-CLO]
    steps:
      - name: "üì• Download GKI kernel artifact"
        uses: actions/download-artifact@v4
        with:
          name: gki-kernel
          path: ./kernels/

      - name: "üì• Download CLO kernel artifact"
        uses: actions/download-artifact@v4
        with:
          name: clo-kernel
          path: ./kernels/

      - name: "üì¶ Create ZIP file with both kernels"
        run: |
          set -e

          [ ! -d "AnyKernel3" ] && git clone --depth=1 https://github.com/topnotchfreaks/AnyKernel3 -b YASK AnyKernel3

          cp kernels/Image.gki AnyKernel3/Image.gki
          cp kernels/Image.clo AnyKernel3/Image.clo

          ZIP_NAME="Anykernel3_YASK-AIO_$(date +'%Y-%m-%d').zip"
          cd AnyKernel3
          zip -r9 "../$ZIP_NAME" * -x .git/*
          cd ..
          echo "ZIP_NAME=$ZIP_NAME" >> $GITHUB_ENV

      - name: "‚¨ÜÔ∏è Upload ZIP to GitHub Release"
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          files: ${{ env.ZIP_NAME }}
          tag_name: "YASK"
