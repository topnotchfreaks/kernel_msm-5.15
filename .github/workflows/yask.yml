name: "Build YASK"

env:
  OUT_DIR: "out"
  KERNEL_VERSION: "5.15"
  ANDROID_VERSION: "13"

on:
  schedule:
    - cron: '0 0 * * 0'
  workflow_dispatch:

jobs:
  build-kernels:
    name: "🐎 Build YASK ${{ matrix.kernel.name }} kernel"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        kernel:
          - name: "GKI"
            dir: "common_gki"
            repo_name: "common"
            repo_url: "https://android.googlesource.com/kernel/common"
            branch: "android13-5.15-lts"
            defconfig: "gki_defconfig"
            local_version: "-YASK/GKI"
            output_name: "Image.gki"
            kpm_patch_url: "https://raw.githubusercontent.com/ShirkNeko/SukiSU_patch/refs/heads/main/kpm/patch_linux"
            extra_patches:
              - "https://raw.githubusercontent.com/topnotchfreaks/kernel_patches/main/0001-Revert-bpf-fix-precision-backtracking-instruction-it.patch"
          - name: "CLO"
            dir: "common_clo"
            repo_name: "clo"
            repo_url: "https://git.codelinaro.org/clo/la/kernel/msm-5.15"
            branch: "kernel.lnx.5.15.r16-rel"
            defconfig: "gki_defconfig"
            local_version: "-YASK/CLO"
            output_name: "Image.clo"
            kpm_patch_url: "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU_patch/refs/heads/main/kpm/patch_linux"
            extra_patches: []

    env:
      KERNEL_DIR: ${{ matrix.kernel.dir }}
      KERNEL_NAME: ${{ matrix.kernel.repo_name }}
      KERNEL_REPO: ${{ matrix.kernel.repo_url }}
      KERNEL_BRANCH: ${{ matrix.kernel.branch }}
      DEFCONFIG_NAME: ${{ matrix.kernel.defconfig }}
      LOCAL_VERSION: ${{ matrix.kernel.local_version }}
      OUTPUT_NAME: ${{ matrix.kernel.output_name }}
      WORK_DIR: ${{ github.workspace }}
      KBUILD_BUILD_USER: "Automated"
      KBUILD_BUILD_HOST: "GitHub"

    steps:
      - name: "✨ Setup workspace"
        run: |
          mkdir -p ${{ env.KERNEL_DIR }}
          echo "BUILD_TIME=$(date +'%Y-%m-%d')" >> $GITHUB_ENV
          sudo apt-get update -qq
          sudo apt-get install -y repo rsync aria2

      - name: "🌟 Clone kernel source"
        working-directory: ./${{ env.KERNEL_DIR }}
        run: |
          git clone --recursive --branch ${{ env.KERNEL_BRANCH }} \
            ${{ env.KERNEL_REPO }} ${{ env.KERNEL_NAME }} --depth=1

      - name: "📥 Initialize AOSP repo and toolchains"
        working-directory: ${{ env.WORK_DIR }}
        run: |
          # Initialize AOSP repo
          repo init -u https://android.googlesource.com/kernel/manifest -b common-android13-5.15-lts --depth=1
          repo sync --optimized-fetch --prune -j8
          
          # Clean up existing repo and common directories
          rm -rf .repo
          rm -rf common

          # Download and setup custom clang toolchain
          aria2c -x 16 -s 16 -o prebuilts/clang/host/linux-x86/clang-r547379.tar.gz "https://github.com/topnotchfreaks/clang/releases/download/v1.0.0/clang-r547379.tar.gz"
          mkdir -p prebuilts/clang/host/linux-x86/clang-r547379
          tar -xzf prebuilts/clang/host/linux-x86/clang-r547379.tar.gz -C prebuilts/clang/host/linux-x86/clang-r547379
          rm -rf prebuilts/clang/host/linux-x86/clang-r547379.tar.gz

          # Remove unused clang for more space
          rm -rf prebuilts/clang/host/linux-x86/clang-3289846
          rm -rf prebuilts/clang/host/linux-x86/clang-r450784e
          rm -rf prebuilts/clang/host/linux-x86/clang-stable
          
          # Update build config constants
          sed -i \
           -e 's/^BRANCH=.*/BRANCH=android13-5.15/' \
           -e 's/^CLANG_VERSION=.*/CLANG_VERSION=r547379/' \
           ${{ env.KERNEL_DIR }}/${{ env.KERNEL_NAME }}/build.config.constants
          
          # Remove defconfig check (if exists)
          sed -i '/^POST_DEFCONFIG_CMDS="check_defconfig"/d' ${{ env.KERNEL_DIR }}/${{ env.KERNEL_NAME }}/build.config.gki || true

      - name: "📐 Setup build environment"
        run: |
          # Setup 8GB swap
          sudo fallocate -l 8G /swapfile
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile
          echo "vm.swappiness=60" | sudo tee -a /etc/sysctl.conf
          sudo sysctl -p

      - name: "🛠 Configure kernel"
        working-directory: ./${{ env.KERNEL_DIR }}/${{ env.KERNEL_NAME }}
        run: |
          # Define the config file path
          CONFIG_FILE="arch/arm64/configs/${{ env.DEFCONFIG_NAME }}"
          
          # Set localversion
          if [ -n "${{ env.LOCAL_VERSION }}" ]; then
            echo "CONFIG_LOCALVERSION=\"${{ env.LOCAL_VERSION }}\"" >> "$CONFIG_FILE"
          fi

      - name: "🧩 Apply kernel patches"
        working-directory: ./${{ env.KERNEL_DIR }}/${{ env.KERNEL_NAME }}
        run: |
          set -e
          
          log() {
            echo "$(date '+%Y-%m-%d %H:%M:%S') - $1"
          }
          
          apply_patch() {
            local patch_url="$1"
            local patch_file=$(basename "$patch_url")
            
            log "Downloading and applying patch: $patch_file"
            curl -L -o "$patch_file" "$patch_url"
            
            if [ -f "$patch_file" ]; then
              if ! patch -p1 < "$patch_file"; then
                log "Warning: Some hunks failed in $patch_file"
              fi
              rm "$patch_file"
            else
              log "Error: Failed to download $patch_file"
              exit 1
            fi
          }

          # Apply common patches
          COMMON_PATCHES=(
            "https://raw.githubusercontent.com/topnotchfreaks/kernel_patches/main/0001-gki-fixup.patch"
            "https://raw.githubusercontent.com/topnotchfreaks/kernel_patches/main/0001-fs-lineageos-disguise.patch"
          )

          for patch in "${COMMON_PATCHES[@]}"; do
            apply_patch "$patch"
          done

          # Apply kernel-specific patches
          EXTRA_PATCHES='${{ toJSON(matrix.kernel.extra_patches) }}'
          if [ "$EXTRA_PATCHES" != "[]" ] && [ "$EXTRA_PATCHES" != "null" ]; then
            echo "$EXTRA_PATCHES" | jq -r '.[]' | while read -r patch; do
              if [ -n "$patch" ]; then
                apply_patch "$patch"
              fi
            done
          fi

          log "✅ All patches applied"

      - name: "😋 Setup KernelSU"
        working-directory: ./${{ env.KERNEL_DIR }}/${{ env.KERNEL_NAME }}
        run: |
          # Clean existing KernelSU
          [ -d "./KernelSU" ] && rm -rf "./KernelSU"
          [ -d "./drivers/kernelsu" ] && rm -rf "./drivers/kernelsu"
          
          # Install KernelSU
          curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU-Ultra/main/kernel/setup.sh" | bash -s susfs-main
          echo "✅ KernelSU updated"

      - name: "😋 Setup SUSFS"
        working-directory: ./${{ env.KERNEL_DIR }}/${{ env.KERNEL_NAME }}
        run: |
          set -e
          
          log() {
            echo "$(date '+%Y-%m-%d %H:%M:%S') - $1"
          }
          
          log "Setting up SUSFS for Android $ANDROID_VERSION, Kernel $KERNEL_VERSION"
          
          # Get available patches from latest release
          PATCHES=$(curl -s "https://api.github.com/repos/topnotchfreaks/kernel_patches/releases/latest" | \
                    grep -o 'browser_download_url.*\.patch' | cut -d\" -f3)
          
          if [ -z "$PATCHES" ]; then
            log "Error: No patches found"
            exit 1
          fi
          
          # Find best matching SUSFS patch
          SELECTED_PATCH=$(echo "$PATCHES" | grep "0001-Implement-SUSFS" | \
                           grep "Android-${ANDROID_VERSION}" | \
                           grep "Kernel-${KERNEL_VERSION}" | head -n 1)
          
          # Fallbacks
          [ -z "$SELECTED_PATCH" ] && SELECTED_PATCH=$(echo "$PATCHES" | grep "0001-Implement-SUSFS" | \
                                                        grep "Android-${ANDROID_VERSION}" | head -n 1)
          [ -z "$SELECTED_PATCH" ] && SELECTED_PATCH=$(echo "$PATCHES" | grep "0001-Implement-SUSFS" | head -n 1)
          
          if [ -z "$SELECTED_PATCH" ]; then
            log "Error: No SUSFS patch found"
            exit 1
          fi
          
          # Download and apply SUSFS patch
          log "Downloading patch: $SELECTED_PATCH"
          curl -L -o "susfs_patch.patch" "$SELECTED_PATCH"
          
          log "Applying SUSFS patch..."
          if ! patch -p1 < "susfs_patch.patch"; then
            log "Warning: Some hunks failed while applying SUSFS patch"
          fi
          
          log "✅ SUSFS patch applied successfully"

      - name: "😋 Setup SUSFS syscall hooks"
        working-directory: ./${{ env.KERNEL_DIR }}/${{ env.KERNEL_NAME }}
        run: |
          set -e
          
          log() { echo "$(date '+%Y-%m-%d %H:%M:%S') - $1"; }
          
          PATCH_URL="https://raw.githubusercontent.com/topnotchfreaks/kernel_patches/main/0001-SUSFS-syscall-hooks.patch"
          PATCH_FILE="0001-SUSFS-syscall-hooks.patch"
          
          curl -L -o "$PATCH_FILE" "$PATCH_URL"
          [ -f "$PATCH_FILE" ] || { log "Patch download failed"; exit 1; }
          
          if ! patch -p1 < "$PATCH_FILE"; then
            log "Warning: Some hunks failed in syscall hooks patch"
          fi
          
          log "✅ Syscall hooks patch applied"

      - name: "⚙️ Add kernel configs"
        working-directory: ./${{ env.KERNEL_DIR }}/${{ env.KERNEL_NAME }}
        run: |
          set -e
          
          CONFIG_FILE="./arch/arm64/configs/${{ env.DEFCONFIG_NAME }}"
          
          # Basic optimizations
          echo "CONFIG_KALLSYMS=y" >> "$CONFIG_FILE"
          
          # SUSFS configs
          cat >> "$CONFIG_FILE" << 'EOF'
          CONFIG_KSU=y
          CONFIG_KSU_MANUAL_HOOK=y
          CONFIG_KPM=y
          CONFIG_KSU_SUSFS=y
          CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y
          CONFIG_KSU_SUSFS_SUS_PATH=y
          CONFIG_KSU_SUSFS_SUS_MOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y
          CONFIG_KSU_SUSFS_SUS_KSTAT=y
          CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n
          CONFIG_KSU_SUSFS_TRY_UMOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y
          CONFIG_KSU_SUSFS_SPOOF_UNAME=y
          CONFIG_KSU_SUSFS_ENABLE_LOG=y
          CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y
          CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y
          CONFIG_KSU_SUSFS_OPEN_REDIRECT=y
          CONFIG_KSU_SUSFS_SUS_SU=n
          CONFIG_TMPFS_XATTR=y
          CONFIG_TMPFS_POSIX_ACL=y
          EOF

          # Performance configs
          cat >> "$CONFIG_FILE" << 'EOF'
          CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=y
          CONFIG_ZRAM_DEF_COMP_LZ4=y
          CONFIG_ZRAM_DEF_COMP="lz4"
          CONFIG_TCP_CONG_ADVANCED=y
          CONFIG_TCP_CONG_BIC=n
          CONFIG_TCP_CONG_WESTWOOD=y
          CONFIG_TCP_CONG_HTCP=n
          CONFIG_TCP_CONG_BBR=y
          CONFIG_DEFAULT_WESTWOOD=y
          EOF
          
          echo "✅ All configs added"

      - name: "🔨 Build kernel using AOSP build.sh"
        working-directory: ${{ env.WORK_DIR }}
        run: |
          export SOURCE_DATE_EPOCH=$(date +%s)

          LTO=full \
          BUILD_CONFIG=${{ env.KERNEL_DIR }}/${{ env.KERNEL_NAME }}/build.config.gki.aarch64 \
          build/build.sh -j$(nproc --all)

      - name: "🩹 Apply KPM patch"
        working-directory: ${{ env.WORK_DIR }}/out/dist
        run: |
          curl -LSs "${{ matrix.kernel.kpm_patch_url }}" -o patch
          chmod +x patch
          ./patch
          mv oImage "${{ env.OUTPUT_NAME }}"

      - name: "📤 Upload kernel artifact"
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.kernel.name }}-kernel
          path: ${{ env.WORK_DIR }}/out/dist/${{ env.OUTPUT_NAME }}
          retention-days: 1

  package-kernels:
    name: "📦 Package Kernels"
    runs-on: ubuntu-latest
    needs: [build-kernels]
    steps:
      - name: "📥 Download kernel artifacts"
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts/

      - name: "📦 Create release package"
        run: |
          set -e

          # Clone AnyKernel3
          git clone --depth=1 https://github.com/topnotchfreaks/AnyKernel3 -b YASK AnyKernel3

          # Copy kernel images
          find ./artifacts -name "Image.*" -exec cp {} AnyKernel3/ \;

          # Create banner
          cat > AnyKernel3/banner << 'EOF'
          ╔═════════════════════════════════════════════════════╗
          ║                                                     ║
          ║          ██╗   ██╗ █████╗ ███████╗██╗  ██╗          ║
          ║          ╚██╗ ██╔╝██╔══██╗██╔════╝██║ ██╔╝          ║
          ║           ╚████╔╝ ███████║███████╗█████╔╝           ║
          ║            ╚██╔╝  ██╔══██║╚════██║██╔═██╗           ║
          ║             ██║   ██║  ██║███████║██║  ██╗          ║
          ║             ╚═╝   ╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝          ║
          ║                                                     ║
          ║               Yet Another Stock Kernel              ║
          ║                   by @belowzeroiq                   ║
          ║                                                     ║
          ║              Powered by Github Actions              ║
          ║                                                     ║
          ╠═════════════════════════════════════════════════════╣
          ║                                                     ║
          ║     Kernel version:                                 ║
          ║     • YASK-GKI Kernel (android13-5.15-lts)          ║
          ║     • YASK-CLO Kernel (kernel.lnx.5.15.r16-rel)     ║
          ║                                                     ║
          ║     Features:                                       ║
          ║     • AOSP Build System & Toolchain                 ║
          ║     • Thin LTO Optimization                         ║
          ║     • Extra TCP Congestion                          ║
          ║     • AOSP clang-r547379                            ║
          ║     • LineageOS disguise                            ║
          ║     • Latest SukiSU-Ultra Drivers + KPM             ║
          ║     • Latest SUSFS version (manual hook)            ║
          ║                                                     ║
          ║     Please ensure:                                  ║
          ║     • Your device is compatible                     ║
          ║     • You have a backup of your current kernel      ║
          ║                                                     ║
          ╚═════════════════════════════════════════════════════╝
          Installing YASK Kernel...
          EOF

          # Create ZIP
          ZIP_NAME="Anykernel3_YASK-AIO_$(date +'%Y-%m-%d').zip"
          cd AnyKernel3
          zip -r9 "../$ZIP_NAME" * -x .git/*
          cd ..
          
          echo "ZIP_NAME=$ZIP_NAME" >> $GITHUB_ENV
          echo "✅ Package created: $ZIP_NAME"

      - name: "⬆️ Upload to GitHub Release"
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          files: ${{ env.ZIP_NAME }}
          tag_name: "YASK"