name: "Build YASK with Google Kernel Tools"

env:
  OUT_DIR: "out"

on:
  schedule:
    - cron: '0 0 * * 0'
  workflow_dispatch:

jobs:
  Set-repos:
    name: "üêÇ Parse repository"
    runs-on: ubuntu-latest
    outputs:
      repos: ${{ steps.generate-matrix.outputs.repos }}
    steps:
      - name: "üòÑ Checkout"
        uses: actions/checkout@v4

  Build-GKI:
    name: "üêé Build YASK GKI kernel with Google Tools"
    runs-on: ubuntu-latest
    env:
      KERNEL_DIR: "android-kernel"
      KERNEL_BRANCH: "android13-5.15-lts"
      DEFCONFIG_NAME: "gki_defconfig"
      OUT_DIR: "out"
      localVersion: "-YASK/GKI"

    steps:
      - name: "‚ú® Setup workspace"
        run: |
          echo "BUILD_TIME=$(date +'%Y-%m-%d')" >> $GITHUB_ENV
          sudo apt-get update
          sudo apt-get install -y build-essential rsync bc curl flex cpio rsync git zip python3 repo

      - name: "üåü Initialize Google Kernel Build Environment"
        run: |
          set -e
          mkdir -p ${{ env.KERNEL_DIR }}
          cd ${{ env.KERNEL_DIR }}
          
          # Initialize repo with the manifest
          repo init -u https://android.googlesource.com/kernel/manifest -b common-android13-5.15-lts
          repo sync -j$(nproc)
          
          echo "‚úÖ Google kernel tools initialized"

      - name: üìê Setup swap 20G
        uses: pierotofy/set-swap-space@master
        with:
            swap-size-gb: 20

      - name: üìê Tune Swap
        run: |
            echo "vm.swappiness=80" | sudo tee -a /etc/sysctl.conf
            sudo sysctl -p
          
      - name: "üõ† Set localversion name in defconfig"
        working-directory: ./${{ env.KERNEL_DIR }}/common
        env:
          LOCALVERSION: ${{ env.localVersion }}
        run: |
          if [ -n "$LOCALVERSION" ]; then
            echo "CONFIG_LOCALVERSION=\"$LOCALVERSION\"" >> arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
          fi      

      - name: "üß© Apply Kernel Fixup Patch"
        working-directory: ./${{ env.KERNEL_DIR }}/common
        run: |
          set -ex
          log() {
            echo "$(date '+%Y-%m-%d %H:%M:%S') - $1"
          }
          apply_patch() {
            local patch="$1"
            log "Applying patch: $(basename "$patch")"
            if ! patch -p1 < "$patch"; then
              log "Warning: Some hunks failed in $(basename "$patch")"
            fi
          }
          PATCH_URL="https://raw.githubusercontent.com/topnotchfreaks/kernel_patches/main/0001-gki-fixup.patch"
          PATCH_FILE="0001-gki-fixup.patch"
          curl -L -o "$PATCH_FILE" "$PATCH_URL"
          [ -f "$PATCH_FILE" ] || { log "Patch download failed"; exit 1; }
          apply_patch "$PATCH_FILE"
          log "‚úÖ External patch applied"

      - name: "üõ† Setup kernel Tweaks"
        working-directory: ./${{ env.KERNEL_DIR }}/common
        run: |
          set -e
          log() {
            echo "$(date '+%Y-%m-%d %H:%M:%S') - $1"
          }
          apply_patch() {
            local patch="$1"
            log "Applying patch: $(basename "$patch")"
            if ! patch -p1 < "$patch"; then
              log "Warning: Some hunks failed in $(basename "$patch")"
            fi
          }
          PATCH_URLS=(
            "https://raw.githubusercontent.com/topnotchfreaks/kernel_patches/main/0001-fs-lineageos-disguise.patch"
          )
          for PATCH_URL in "${PATCH_URLS[@]}"; do
            PATCH_FILE=$(basename "$PATCH_URL")
            curl -L -o "$PATCH_FILE" "$PATCH_URL"
            [ -f "$PATCH_FILE" ] || { log "Patch download failed"; exit 1; }
            apply_patch "$PATCH_FILE"
          done
          log "‚úÖ All patches applied"

      - name: "üòã Update KernelSU Version"
        working-directory: ./${{ env.KERNEL_DIR }}/common
        run: |
          [ -d "./KernelSU" ] && rm -rf "./KernelSU"
          [ -d "./drivers/kernelsu" ] && rm -rf "./drivers/kernelsu"
          curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU-Ultra/main/kernel/setup.sh" | bash -s susfs-main
          echo "‚úÖ KernelSU updated"

      - name: "üòã Setup SUSFS"
        working-directory: ./${{ env.KERNEL_DIR }}/common
        run: |
          set -ex
          log() { echo "$(date '+%Y-%m-%d %H:%M:%S') - $1"; }
          PATCH_URL="https://raw.githubusercontent.com/topnotchfreaks/kernel_patches/main/0001-Implement-SUSFS-v1.5.8-syscall-hooks.patch"
          PATCH_FILE="0001-Implement-SUSFS-v1.5.8-syscall-hooks.patch"
          curl -L -o "$PATCH_FILE" "$PATCH_URL"
          [ -f "$PATCH_FILE" ] || { log "Patch download failed"; exit 1; }
          patch -p1 < "$PATCH_FILE" || log "Warning: Some hunks failed"
          log "‚úÖ SUSFS patch applied"

      - name: "‚öôÔ∏è Add SUSFS configs"
        working-directory: ./${{ env.KERNEL_DIR }}/common
        run: |
          set -ex
          CONFIG_FILE="./arch/arm64/configs/${DEFCONFIG_NAME}"
          CONFIGS=(
            "CONFIG_KSU=y"
            "CONFIG_KSU_MANUAL_HOOK=y"
            "CONFIG_KPM=y"
            "CONFIG_KALLSYMS=y"
            "CONFIG_KSU_SUSFS=y"
            "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y"
            "CONFIG_KSU_SUSFS_SUS_PATH=y"
            "CONFIG_KSU_SUSFS_SUS_MOUNT=y"
            "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y"
            "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y"
            "CONFIG_KSU_SUSFS_SUS_KSTAT=y"
            "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n"
            "CONFIG_KSU_SUSFS_TRY_UMOUNT=y"
            "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y"
            "CONFIG_KSU_SUSFS_SPOOF_UNAME=y"
            "CONFIG_KSU_SUSFS_ENABLE_LOG=y"
            "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y"
            "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y"
            "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y"
            "CONFIG_KSU_SUSFS_SUS_SU=n"
            "CONFIG_TMPFS_XATTR=y"
            "CONFIG_TMPFS_POSIX_ACL=y"
          )
          printf "%s\n" "${CONFIGS[@]}" >> "$CONFIG_FILE"
          echo "‚úÖ SUSFS configs added"

      - name: "‚öôÔ∏è Add Additional configs"
        working-directory: ./${{ env.KERNEL_DIR }}/common
        run: |
          set -ex
          CONFIG_FILE="./arch/arm64/configs/${DEFCONFIG_NAME}"

          sed -i '/CONFIG_NO_HZ/d' "$CONFIG_FILE"

          CONFIGS=(
            "CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=y"
            "CONFIG_ZRAM_DEF_COMP_LZ4=y"
            "CONFIG_TCP_CONG_ADVANCED=y"
            "CONFIG_TCP_CONG_BIC=n"
            "CONFIG_TCP_CONG_WESTWOOD=y"
            "CONFIG_TCP_CONG_HTCP=n"
            "CONFIG_TCP_CONG_BBR=y"
            "CONFIG_DEFAULT_WESTWOOD=y"
          )
          printf "%s\n" "${CONFIGS[@]}" >> "$CONFIG_FILE"
          echo "‚úÖ configs added"

      - name: "üé∂ Build kernel using Google build tools"
        working-directory: ./${{ env.KERNEL_DIR }}
        run: |
          set -e
          
          # Set build environment variables
          export BUILD_CONFIG=common/build.config.gki.aarch64
          export KBUILD_BUILD_USER="Automated"
          export KBUILD_BUILD_HOST="GitHub"
          export OUT_DIR="$PWD/${{ env.OUT_DIR }}"
          
          # Create build config if it doesn't exist
          if [ ! -f "$BUILD_CONFIG" ]; then
            cat > "$BUILD_CONFIG" << EOF
            ARCH=arm64
            BRANCH=android13-5.15-lts
            CLANG_TRIPLE=aarch64-linux-gnu-
            CROSS_COMPILE=aarch64-linux-gnu-
            DEFCONFIG=${{ env.DEFCONFIG_NAME }}
            KERNEL_DIR=common
            LLVM=1
            LTO=thin
            MAKE_GOALS="Image"
            CC=clang
            LD=ld.lld
            AR=llvm-ar
            NM=llvm-nm
            OBJCOPY=llvm-objcopy
            OBJDUMP=llvm-objdump
            READELF=llvm-readelf
            OBJSIZE=llvm-size
            STRIP=llvm-strip
            EOF
          fi
          
          # Build using Google's build script
          BUILD_CONFIG="$BUILD_CONFIG" ./build/build.sh

      - name: "ü©π Patch Image with KPM"
        working-directory: ./${{ env.KERNEL_DIR }}
        run: |
          cd "${{ env.OUT_DIR }}/arch/arm64/boot/"
          curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU_patch/refs/heads/main/kmp/patch_linux" -o patch
          chmod 777 patch
          ./patch
          rm -rf Image
          mv oImage Image.gki

      - name: "üì§ Upload GKI kernel artifact"
        uses: actions/upload-artifact@v4
        with:
          name: gki-kernel
          path: ${{ env.KERNEL_DIR }}/${{ env.OUT_DIR }}/arch/arm64/boot/Image.gki
          retention-days: 1

  Build-CLO:
    name: "üêé Build YASK CLO kernel with Google Tools"
    runs-on: ubuntu-latest
    env:
      KERNEL_DIR: "android-kernel-clo"
      CLO_REPO: "https://git.codelinaro.org/clo/la/kernel/msm-5.15"
      CLO_BRANCH: "kernel.lnx.5.15.r1-rel"
      DEFCONFIG_NAME: "gki_defconfig"
      OUT_DIR: "out"
      localVersion: "-YASK/CLO"

    steps:
      - name: "‚ú® Setup workspace"
        run: |
          echo "BUILD_TIME=$(date +'%Y-%m-%d')" >> $GITHUB_ENV
          sudo apt-get update
          sudo apt-get install -y build-essential rsync bc curl flex cpio rsync git zip python3 repo

      - name: "üåü Setup Hybrid Build Environment (Google Tools + CLO Kernel)"
        run: |
          set -e
          
          repo init -u https://github.com/topnotchfreaks/kernel_manifest -b main
          repo sync -j$(nproc)
          
          # Then clone CLO kernel separately
          mkdir -p ${{ env.KERNEL_DIR }}
          cd ${{ env.KERNEL_DIR }}
          git clone --recursive --branch ${{ env.CLO_BRANCH }} ${{ env.CLO_REPO }} common --depth=1
          
          echo "‚úÖ Hybrid environment setup complete"

      - name: üìê Setup swap 20G
        uses: pierotofy/set-swap-space@master
        with:
            swap-size-gb: 20

      - name: üìê Tune Swap
        run: |
            echo "vm.swappiness=80" | sudo tee -a /etc/sysctl.conf
            sudo sysctl -p

      - name: "üõ† Set localversion name in defconfig"
        working-directory: ./${{ env.KERNEL_DIR }}/common
        env:
          LOCALVERSION: ${{ env.localVersion }}
        run: |
          if [ -n "$LOCALVERSION" ]; then
            echo "CONFIG_LOCALVERSION=\"$LOCALVERSION\"" >> arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
          fi

      - name: "üß© Apply Kernel Fixup Patch"
        working-directory: ./${{ env.KERNEL_DIR }}/common
        run: |
          set -ex
          log() {
            echo "$(date '+%Y-%m-%d %H:%M:%S') - $1"
          }
          apply_patch() {
            local patch="$1"
            log "Applying patch: $(basename "$patch")"
            if ! patch -p1 < "$patch"; then
              log "Warning: Some hunks failed in $(basename "$patch")"
            fi
          }
          PATCH_URL="https://raw.githubusercontent.com/topnotchfreaks/kernel_patches/main/0001-gki-fixup.patch"
          PATCH_FILE="0001-gki-fixup.patch"
          curl -L -o "$PATCH_FILE" "$PATCH_URL"
          [ -f "$PATCH_FILE" ] || { log "Patch download failed"; exit 1; }
          apply_patch "$PATCH_FILE"
          log "‚úÖ External patch applied"

      - name: "üõ† Setup kernel Tweaks"
        working-directory: ./${{ env.KERNEL_DIR }}/common
        run: |
          set -e
          log() {
            echo "$(date '+%Y-%m-%d %H:%M:%S') - $1"
          }
          apply_patch() {
            local patch="$1"
            log "Applying patch: $(basename "$patch")"
            if ! patch -p1 < "$patch"; then
              log "Warning: Some hunks failed in $(basename "$patch")"
            fi
          }
          PATCH_URLS=(
            "https://raw.githubusercontent.com/topnotchfreaks/kernel_patches/main/0001-fs-lineageos-disguise.patch"
          )
          for PATCH_URL in "${PATCH_URLS[@]}"; do
            PATCH_FILE=$(basename "$PATCH_URL")
            curl -L -o "$PATCH_FILE" "$PATCH_URL"
            [ -f "$PATCH_FILE" ] || { log "Patch download failed"; exit 1; }
            apply_patch "$PATCH_FILE"
          done
          log "‚úÖ All patches applied"

      - name: "üòã Update KernelSU Version"
        working-directory: ./${{ env.KERNEL_DIR }}/common
        run: |
          [ -d "./KernelSU" ] && rm -rf "./KernelSU"
          [ -d "./drivers/kernelsu" ] && rm -rf "./drivers/kernelsu"
          curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU-Ultra/main/kernel/setup.sh" | bash -s susfs-main
          echo "‚úÖ KernelSU updated"

      - name: "üòã Setup SUSFS"
        working-directory: ./${{ env.KERNEL_DIR }}/common
        run: |
          set -ex
          log() { echo "$(date '+%Y-%m-%d %H:%M:%S') - $1"; }
          PATCH_URL="https://raw.githubusercontent.com/topnotchfreaks/kernel_patches/main/0001-Implement-SUSFS-v1.5.8-syscall-hooks.patch"
          PATCH_FILE="0001-Implement-SUSFS-v1.5.8-syscall-hooks.patch"
          curl -L -o "$PATCH_FILE" "$PATCH_URL"
          [ -f "$PATCH_FILE" ] || { log "Patch download failed"; exit 1; }
          patch -p1 < "$PATCH_FILE" || log "Warning: Some hunks failed"
          log "‚úÖ SUSFS patch applied"

      - name: "‚öôÔ∏è Add SUSFS configs"
        working-directory: ./${{ env.KERNEL_DIR }}/common
        run: |
          set -ex
          CONFIG_FILE="./arch/arm64/configs/${DEFCONFIG_NAME}"
          CONFIGS=(
            "CONFIG_KSU=y"
            "CONFIG_KSU_MANUAL_HOOK=y"
            "CONFIG_KPM=y"
            "CONFIG_KALLSYMS=y"
            "CONFIG_KSU_SUSFS=y"
            "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y"
            "CONFIG_KSU_SUSFS_SUS_PATH=y"
            "CONFIG_KSU_SUSFS_SUS_MOUNT=y"
            "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y"
            "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y"
            "CONFIG_KSU_SUSFS_SUS_KSTAT=y"
            "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n"
            "CONFIG_KSU_SUSFS_TRY_UMOUNT=y"
            "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y"
            "CONFIG_KSU_SUSFS_SPOOF_UNAME=y"
            "CONFIG_KSU_SUSFS_ENABLE_LOG=y"
            "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y"
            "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y"
            "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y"
            "CONFIG_KSU_SUSFS_SUS_SU=n"
            "CONFIG_TMPFS_XATTR=y"
            "CONFIG_TMPFS_POSIX_ACL=y"
          )
          printf "%s\n" "${CONFIGS[@]}" >> "$CONFIG_FILE"
          echo "‚úÖ SUSFS configs added"

      - name: "‚öôÔ∏è Add Additional configs"
        working-directory: ./${{ env.KERNEL_DIR }}/common
        run: |
          set -ex
          CONFIG_FILE="./arch/arm64/configs/${DEFCONFIG_NAME}"

          sed -i '/CONFIG_NO_HZ/d' "$CONFIG_FILE"

          CONFIGS=(
            "CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=y"
            "CONFIG_ZRAM_DEF_COMP_LZ4=y"
            "CONFIG_TCP_CONG_ADVANCED=y"
            "CONFIG_TCP_CONG_BIC=n"
            "CONFIG_TCP_CONG_WESTWOOD=y"
            "CONFIG_TCP_CONG_HTCP=n"
            "CONFIG_TCP_CONG_BBR=y"
            "CONFIG_DEFAULT_WESTWOOD=y"
          )
          printf "%s\n" "${CONFIGS[@]}" >> "$CONFIG_FILE"
          echo "‚úÖ configs added"

      - name: "üé∂ Build CLO kernel using Google build tools"
        working-directory: ./${{ env.KERNEL_DIR }}
        run: |
          set -e
          
          # Set build environment variables
          export BUILD_CONFIG=build.config.gki.aarch64
          export KBUILD_BUILD_USER="Automated"
          export KBUILD_BUILD_HOST="GitHub"
          export OUT_DIR="$PWD/${{ env.OUT_DIR }}"
          
          # Create custom build config for CLO
          cat > "$BUILD_CONFIG" << EOF
          ARCH=arm64
          BRANCH=${{ env.CLO_BRANCH }}
          CLANG_TRIPLE=aarch64-linux-gnu-
          CROSS_COMPILE=aarch64-linux-gnu-
          DEFCONFIG=${{ env.DEFCONFIG_NAME }}
          KERNEL_DIR=common
          LLVM=1
          LTO=thin
          MAKE_GOALS="Image"
          CC=clang
          LD=ld.lld
          AR=llvm-ar
          NM=llvm-nm
          OBJCOPY=llvm-objcopy
          OBJDUMP=llvm-objdump
          READELF=llvm-readelf
          OBJSIZE=llvm-size
          STRIP=llvm-strip
          EOF
          
          # Build using Google's build script
          BUILD_CONFIG="$BUILD_CONFIG" ./build/build.sh

      - name: "ü©π Patch Image with KPM"
        working-directory: ./${{ env.KERNEL_DIR }}
        run: |
          cd "${{ env.OUT_DIR }}/arch/arm64/boot/"
          curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU_patch/refs/heads/main/kmp/patch_linux" -o patch
          chmod 777 patch
          ./patch
          rm -rf Image
          mv oImage Image.clo

      - name: "üì§ Upload CLO kernel artifact"
        uses: actions/upload-artifact@v4
        with:
          name: clo-kernel
          path: ${{ env.KERNEL_DIR }}/${{ env.OUT_DIR }}/arch/arm64/boot/Image.clo
          retention-days: 1

  Package-Kernels:
    name: "üì¶ Package Kernels"
    runs-on: ubuntu-latest
    needs: [Build-GKI, Build-CLO]
    steps:
      - name: "üì• Download GKI kernel artifact"
        uses: actions/download-artifact@v4
        with:
          name: gki-kernel
          path: ./kernels/

      - name: "üì• Download CLO kernel artifact"
        uses: actions/download-artifact@v4
        with:
          name: clo-kernel
          path: ./kernels/

      - name: "üì¶ Create ZIP file with both kernels"
        run: |
          set -e

          [ ! -d "AnyKernel3" ] && git clone --depth=1 https://github.com/topnotchfreaks/AnyKernel3 -b YASK AnyKernel3

          cp kernels/Image.gki AnyKernel3/Image.gki
          cp kernels/Image.clo AnyKernel3/Image.clo

          ZIP_NAME="Anykernel3_YASK-AIO_$(date +'%Y-%m-%d').zip"
          cd AnyKernel3
          zip -r9 "../$ZIP_NAME" * -x .git/*
          cd ..
          echo "ZIP_NAME=$ZIP_NAME" >> $GITHUB_ENV

      - name: "‚¨ÜÔ∏è Upload ZIP to GitHub Release"
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          files: ${{ env.ZIP_NAME }}
          tag_name: "YASK"